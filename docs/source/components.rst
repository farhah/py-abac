Components
==========

The different py-abac components corresponding to those in the access control architecture are described in this section.
Using these components you can implement fine-grained access control for your protected resources.

.. toctree::
   :maxdepth: 1

   Policy

Policy
------

This is the main object containing rules for accessing resources. A policy object can be created by first defining a policy JSON using the JSON-based `Policy Language <#policy-language>`_\ , and then parsing it using the ``Policy`` class.

.. code-block:: python

   from py_abac import Policy

   # Policy definition in JSON-based policy language
   policy_json = {
       "uid": "1",
       "description": "Max is not allowed to create, delete, get any resource",
       "effect": "deny",
       "rules": {
           "subject": {"$.name": {"condition": "Equals", "value": "Max"}},
           "resource": {"$.name": {"condition": "RegexMatch", "value": ".*"}},
           "action": [{"$.method": {"condition": "Equals", "value": "create"}},
                      {"$.method": {"condition": "Equals", "value": "delete"}},
                      {"$.method": {"condition": "Equals", "value": "get"}}],
           "context": {}
       },
       "targets": {},
       "priority": 0
   }
   # Prase policy JSON to create Policy object
   policy = Policy.from_json(policy_json)

See the `Policy Language <#policy-language>`_ section for detailed description of JSON structure.


Access Request
--------------

A ``Request`` object represents the access request generated by PEP in the ABAC architecture. All you need to do is take any kind of incoming user request (REST request, SOAP, etc.) and build a ``Request`` object out of it in order to feed it to py-ABAC.

.. code-block:: python

   from py_abac import Request
   from flask import request, session

   # Create a access request JSON from flask request object
   request_json = {
       "subject": {
           "id": "",
           "attributes": {"name": request.values.get("username")}
       },
       "resource": {
           "id": "",
           "attributes": {"name": request.path}
       },
       "action": {
           "id": "",
           "attributes": {"method": request.method}
       },
       "context": {}
   }
   # Parse JSON and create access request object
   request = Request.from_json(request_json)

You might have noticed the presence of empty  ``"id"`` fields for the ``subject``\ , ``resource`` and ``action`` access control elements in the above example. These are called *target IDs* and are mandatory fields for creating an access request object in py-ABAC. The purpose of these fields is explained in detail in the `Target Block <#targets-block>`_ subsection of `Policy Language <#policylanguage>`_. If you are unsure of their usage, you can safely set them to an empty string.


PDP
---

This component is the policy decision point, instantiated through the ``PDP`` class. It is the main entry point of py-ABAC for evaluating policies. At a minimum, a `Storage <#storage>`_ object is required to create a ``PDP`` object. It has one method, ``is_allowed``\ , which when passed a ``Request`` object, gives you a boolean answer: is access allowed or not?

.. code-block:: python

   from pymongo import MongoClient
   from py_abac import PDP
   from py_abac.storage import MongoStorage

   # Setup storage
   client = MongoClient()
   st = MongoStorage(client)
   # Insert all polices to storage
   for p in policies:
       st.add(p)

   # Create PDP
   pdp = PDP(st)

   # Evaluate if access is allowed
   if pdp.is_allowed(request):
       return "Access Allowed", 200
   else:
       return "Unauthorized Access", 401

By default, a ``PDP`` object uses the ``DenyOverrides`` algorithm for policy evaluation. To specify otherwise, pass the evaluation algorithm at creation. Moreover, a list of `AttributeProvider <#attributeproviders>`_ objects can also be provided.

.. code-block:: python

   from py_abac import PDP, EvaluationAlgorithm
   from py_abac.storage import MongoStorage
   from py_abac.providers import AttributeProvider

   # A simple email attribute provider class
   class EmailAttributeProvider(AttributeProvider):
       def get_attribute_value(self, ace, attribute_path, ctx):
           return "example@gmail.com"

   # Setup storage
   client = MongoClient()
   st = MongoStorage(client)
   # Insert all polices to storage
   for p in policies:
       st.add(p)

   # Create PDP configured to use highest priority algorithm
   # and an additional email attribute provider
   pdp = PDP(st, EvaluationAlgorithm.HIGHEST_PRIORITY, [EmailAttributeProvider()])

The three supported algorithms are :class:`EvaluationAlgorithm.DENY_OVERRIDES`, :class:`EvaluationAlgorithm.ALLOW_OVERRIDES`, and :class:`EvaluationAlgorithm.HIGHEST_PRIORITY`.

Storage
-------

The :class:`Storage` is a component which provides interface for implementing policy persistence. It provides the following methods:

.. code-block:: python

   # Store a Policy
   add(policy)

   # Retrieve a Policy by its ID
   get(uid)

   # Retrieve all stored Policies (with pagination)
   get_all(limit, offset)

   # Store an updated Policy
   update(policy)

   # Delete Policy from storage by its ID
   delete(uid)

   # Retrieve Policies that match the given target IDs
   get_for_target(subject_id, resource_id, action_id)

Storage may have various backend implementations (RDBMS, NoSQL databases, etc.). py-ABAC ships some Storage implementations out of the box. See below.

Memory
^^^^^^

Will be part of v0.2.1

MongoDB
^^^^^^^

MongoDB is chosen as the most popular and widespread NO-SQL database.

.. code-block:: python

   from pymongo import MongoClient
   from py_abac.storage import MongoStorage

   client = MongoClient('localhost', 27017)
   storage = MongoStorage(client, 'database-name', collection='optional-collection-name')

Default database and collection names are 'py_abac' and  'py_abac_policies' respectively.

Actions are the same as for any Storage that conforms interface of ``py_abac.storage.base.StorageBase`` base class.

SQL
^^^

Will be part of v0.2.2

Migration
---------

``py_abac.storage.migration`` is a set of components that are useful for `Storage <#storage>`_. The design and implementation is taken from the `Vakt <https://github.com/kolotaev/vakt>`_ SDK. It's recommended in favor over manual actions on DB schema/data since it's aware of py-ABAC requirements. But it's not mandatory. It is up to a particular Storage to decide whether it needs migrations. It consists of 3 components:


* ``Migration``
* ``MigrationSet``
* ``Migrator``

``Migration`` allows you to describe data modifications between versions. Each storage can have a number of ``Migration`` classes to address different releases with the order of the migration specified in ``order`` property. The class should be located inside corresponding storage module and should implement ``py_abac.storage.migration.Migration``. Migration has 2 main methods (as you might guess) and 1 property:


* ``up`` - runs db "schema" upwards
* ``down`` - runs db "schema" downwards (rolls back the actions of ``up``\ )
* ``order`` - tells the number of the current migration in a row

``MigrationSet`` is a component that represents a collection of Migrations for a Storage. You should define your own migration-set. It should be located inside particular storage module and implement ``py_abac.storage.migration.MigrationSet``. It has 3 methods that lest unimplemented:


* ``migrations`` - should return all initialized Migration objects
* ``save_applied_number`` - saves a number of a lst applied up migration in the Storage for later reference
* ``last_applied`` - returns a number of a lst applied up migration from the Storage

``Migrator`` is an executor of a migrations. It can execute all migrations up or down, or execute a particular migration if ``number`` argument is provided.

Example usage:

.. code-block:: python

   from pymongo import MongoClient
   from py_abac.storage.mongo import MongoStorage, MongoMigrationSet
   from py_abac.storage.migration import Migrator

   client = MongoClient('localhost', 27017)
   storage = MongoStorage(client, 'database-name', collection='optional-collection-name')

   migrator = Migrator(MongoMigrationSet(storage))
   migrator.up()
   ...
   migrator.down()
   ...
   migrator.up(number=2)
   ...
   migrator.down(number=2)


AttributeProvider
-----------------

:class:`AttributeProvider` is an interface to create a PIP. The purpose of this object is to provide attribute values missing in the ``Request`` object. During policy evaluation, the ``PDP`` first checks the ``Request`` object for attribute values; If no values are found, it then checks the list of ``AttributeProvider``\ objects passed during creation. In order to create an ``AttributeProvider`` object, you need to implement the ``get_attribute_value`` method.

.. code-block:: python

   from py_abac.provider.base import AttributeProvider

   # A simple email attribute provider class
   class EmailAttributeProvider(AttributeProvider):
       def get_attribute_value(self, ace, attribute_path, ctx):
           """
               Returns a value for an attribute. If value not found
               then return None.


               :param ace: string value indicating the access control
                           element, i.e. "subject", "resource", "action"
                           or "context".
               :param attribute_path: string in ObjectPat notation indicating
                                      the attribute for which the value is
                                      requested.
               :param ctx: evaluation context
           """
           return "example@gmail.com"

As seen in the above example, the ``get_attribute_value`` method takes in three arguments: ``ace``\ , ``attribute_path`` and ``ctx``. The ``ace`` is a string value indicating for which access control element the attribute value is being requested. This argument will be set to either ``"subject"``\ , ``"resource"``\ , ``"action"``\ , or ``"context"``. The ``attribute_path`` argument is a string in  `ObjectPath <http://objectpath.org/>`_ notation denoting the attribute for which the value is being requested. The ``ctx`` argument is an `EvaluationContext <#evaluationcontext>`_ object. The primary purpose of this argument is to retrieve values of other attributes. A common use-case would be to return values conditioned upon the values of other attributes.

.. code-block:: python

   # An email attribute provider class
   class EmailAttributeProvider(AttributeProvider):
       def get_attribute_value(self, ace, attribute_path, ctx):
           # Return email for Max
           if ctx.get_attribute_value("subject", "$.name") == "Max":
               return "max@gmail.com"
           # Else return default email
           return "default@gmail.com"

Lastly, if the ``AttributeProvider`` does not contain value for an attribute, the ``get_attribute_value`` must return ``None``.


EvaluationContext
-----------------

An ``EvaluationContext`` object is created by the ``PDP`` during policy evaluation. This object is used by the ``PDP`` for retrieval of attribute values for which the policy is defined. It has following properties:

.. code-block:: python

   # The target ID for subject access control element
   ctx.subject_id

   # The target ID for resource access control element
   ctx.resource_id

   # The target ID for action access control element
   ctx.action_id

   # Lookup a value for an attribute of an access control element
   ctx.get_attribute_value(ace: str, attribute_path: str)

During retrieval,  the ``EvaluationContext`` first checks for attribute value in the ``Request`` object. If the value is not found, it then checks all the ``AttributeProvider`` objects sequentially.
